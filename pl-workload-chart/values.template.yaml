# Profile selection
profile: gcp  # or "generic"

# Namespace and app
namespace: hello-world
appName: hello-world

# Deployment
replicas: 2
imageLocation: hashicorp/http-echo
registrySecretName: polar-labs-registry
containerArgs:
  - -text=echo1
containerPorts:
  - name: web-ui
    port: 80
    targetPort: 5678

# Service configuration
service:
  type: NodePort # Can be ClusterIP, NodePort, LoadBalancer

resources:
  limits:
    memory:
  requests:
    cpu:
    memory:

# Environment and secrets
envVars:
  TEST: test
secrets:
  - name: do-creds
    type: Opaque
    data:
      TEST: test

# Ingress
clusterIssuerName: letsencrypt-production
# This secret will be created by cert-manager and referenced by your Ingress and Certificate
# It must match the 'secretName' in both the Certificate and Ingress resources
# Example: hello-world-tls
# If you change this, make sure to update it everywhere
#
tlsSecretName: "hello-world-tls"
ingressClassName: gce  # or "nginx" for generic
ingressAnnotations: {}
hosts:
  - domainName: test1111.polarlabs.ca
    ingressPaths:
      - path: /
        type: Prefix
        servicePort: 80

# Optional: Persistent Volumes
# persistentVolumeClaims:
#   - name: test-pvc
#     storage: 5Gi
#     mountPath: /data

# Optional: Default backend for ingress (used by both profiles)
# defaultBackend:
#   service:
#     name: my-default-backend
#     port:
#       number: 80

# ServiceAccountName is required to pass in the deployment config for both GCP and generic profiles.
# Also required to create ServiceAccount resource for both GCP and generic profiles.
serviceAccountName: "hello-world-hahha"

# Optional: GCP-specific
gcp:
  serviceAccountAnnotations:
    iam.gke.io/gcp-service-account: "<GCP_ANNOTATION_PLACEHOLDER>@your-project.iam.gserviceaccount.com"
 
  ingress:
    enabled: false # Set true to enable GCP Ingress

  # BackendConfig health check values are now sourced from gatewayapi.healthCheckPolicy for DRY config.
  backendConfig:
    enabled: false 
    # All health check tuning is inherited from gatewayapi.healthCheckPolicy below

  gatewayapi:
    enabled: true
    # Gateway API resources for advanced traffic management (Kubernetes Gateway API)
    httproute:
      gatewayName: "gateway"  # Name of Gateway resource to attach this route to
      path: "/"  # URL path to match for routing
      hostname: "" # Hostname to match for routing
      port: 80    # Service port to forward traffic to


    referenceGrant:
      fromNamespace: "default"  # Namespace of the referencing resource
      toName: "hello-world"  # Name of the referenced resource

    # All health check tuning for both Gateway API and BackendConfig
    healthCheckPolicy:
      type: HTTP      # Health check protocol (HTTP/HTTPS/TCP/GRPC)
      port: 80        # Port to use for health checking
      path: "/healthz"      # HTTP path to use for health checking
      intervalSeconds: 30    # Time between health checks
      timeoutSeconds: 5      # Timeout for each health check
      healthyThreshold: 1    # Number of successes before marking healthy
      unhealthyThreshold: 3  # Number of failed checks before marking unhealthy
